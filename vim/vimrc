" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set nocp
set updatetime=100
set nu
"set mousefocus
"set hlsearch
set smartindent
set cindent 
set tabstop=4
set shiftwidth=4
set et
set smarttab
set linebreak
set nobackup
set guifont=Inconsolata\ Medium\ 11
"set guifont=Monaco\ Medium\ 9
set t_Co=256
set nowrapscan
set winaltkeys=no
set nocompatible

set diffopt=filler,vertical
"set fold
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set foldmethod=manual
"set foldlevel=3

"colorscheme habilight 
if has("win32")
"not set colorscheme in windows
else
    if has("gui_running")
        colorscheme ljyat
    else
        colorscheme desert
    endif

    set guioptions-=m
    set guioptions-=T
endif
"MyTagListTagName must set after set colorscheme
hi  MyTagListTagName guibg=yellow guifg=black

let NERDTreeWinPos = "right"

"=> cscope set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
	    cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
	    cs add $CSCOPE_DB
	endif
	set csverb
endif

function! CscopeReload_cs()
	if has("cscope")
		set nocscopeverbose
		cs kill -1
		cs add  cscope.out
		"exe "cs add cscope.out"
		set cscopeverbose
	endif
endfunction
command! R call CscopeReload_cs()

function! CscopeSearchStringPattern()
    if !filereadable('cscope.files')
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search string: ", expand("<cword>"))
	echohl None

    if pattern == ""
        return 
    endif

    let pattern = "'" . pattern . "'" 
    let tmpfile = '~/.gvim.tmp' . getpid() 
    let real_cmd = '!grep -n -E ' . pattern . ' `cat cscope.files` > ' . tmpfile
    execute "silent! " . real_cmd
    
    if v:version >= 700 
        execute "silent! cgetfile " . tmpfile
    else
        if exists(":cgetfile")
            execute "silent! cgetfile " . tmpfile
        else
            execute "silent! cfile " . tmpfile
        endif
    endif

    " Open the quickfix window below the current window
    belowright copen

    execute "silent! !rm -rf " . tmpfile
endfunction
command! CscopeSearchStringPattern call CscopeSearchStringPattern()

function! CscopeFindFilePattern()
    if !filereadable('cscope.files')
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search file: ")
	echohl None

    if pattern == ""
        return 
    endif

    let pattern = "'" . pattern . "'" 
    let tmpfile = '~/.gvim.tmp' . getpid() 
    let real_cmd = '!grep  -E ' . pattern . ' cscope.files  > '  . tmpfile
    execute "silent! " . real_cmd

    let ef = &errorformat 
    set efm=%f

    if v:version >= 700 
        execute "silent! cgetfile " . tmpfile
    else
        if exists(":cgetfile")
            execute "silent! cgetfile " . tmpfile
        else
            execute "silent! cfile " . tmpfile
        endif
    endif

    " Open the quickfix window below the current window
    belowright copen

    let &errorformat = ef 
    execute "silent! !rm -rf " . tmpfile
endfunction
command! CscopeFindFilePattern call CscopeFindFilePattern()

function! SearchStringCurrentBuffer()
    let curfilename = expand("%")
    if curfilename == ""
        echohl Special
        echo "   buffer name is NULL"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search string cur buffer: ", expand("<cword>"))
	echohl None

    if pattern == ""
        return 
    endif

    let pattern = "/" . pattern . "/" 
    let real_cmd = "vimgrep " . pattern . " %"
    execute "silent! " . real_cmd
    
    " Open the quickfix window below the current window
    belowright copen
endfunction
command! SearchStringCurrentBuffer call SearchStringCurrentBuffer()

nmap <C-s> :SearchStringCurrentBuffer <CR>
nmap <M-f> :CscopeFindFilePattern <CR>

"
"function! LoadCscope()
"	let db = findfile("cscope.out", ".;")
"	if (!empty(db))
"		let path = strpart(db, 0, match(db, "/cscope.out$"))
"		set nocscopeverbose " suppress 'duplicate connection' error
"		exe "cs add " . db
"		set cscopeverbose
"	endif
"endfunction
"	au BufEnter * call LoadCscope()

map g<C-]> :cs find c <C-R>=expand("<cword>")<CR><CR>
map g<C-\> :cs find s <C-R>=expand("<cword>")<CR><CR>


nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nmap <M-[> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <M-\> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <M-t> :cs f t 
"=> switch windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
"=> switch windows end
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=> normal set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"move
nmap <M-j> 3<C-e>
nmap <M-k> 3<C-y>
"copy and paste
vmap <M-c> "+y
nmap <M-v> "+p

nmap <M-e> g_
nmap <M-a> 0
"show marks
nmap <M-2> :marks <CR>
nmap <M-1> %
nmap <M-l> :pc<CR> :ccl<CR>

"set encoding
set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1,ucs-bom

nmap <M-]> <C-]>
nmap / <leader>r
nmap <M-m> <leader>m
nmap <M-d> <C-]>

imap <M-h> <Left>
imap <M-l> <Right>

nmap <F2> :Tlist<CR>
nmap <M-LeftMouse> <LeftMouse><leader>m
nmap <RightMouse> <C-o>
nmap <S-LeftMouse> <LeftMouse>:nohlsearch<CR>:MarkClear<CR><leader>m
nmap <M-RightMouse> :nohlsearch<CR>:MarkClear<CR>
nmap <F5> :MarkClear<CR> :nohlsearch <CR>
nmap <F6> :TlistClose<CR> :JavaBrowser <CR>

"grep -E 
nmap <M-s> :CscopeSearchStringPattern<CR>
nmap <M-q> :ccl <CR>
nmap <F8> :edit ++ff=dos <CR>
"=> minibufer set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMaxSize = 40
let g:miniBufExplMinSize = 25
nmap <F3> :TMiniBufExplorer <CR>

""""minibufer set end"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"color set
nmap M :nohlsearch<CR>:MarkClear<CR><leader>m
nmap n <leader>/
nmap N <leader>?
nmap <leader>] <C-w>}

" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python set omnifunc=pythoncomplete#Complete 
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS 
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags 
autocmd FileType htm set omnifunc=htmlcomplete#CompleteTags 
autocmd FileType css set omnifunc=csscomplete#CompleteCSS 
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags 
autocmd FileType php set omnifunc=phpcomplete#CompletePHP 
autocmd FileType c,cpp,java,cs set omnifunc=ccomplete#Complete

" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
